version: '3.8'

services:
  epusdt:
    build: .
    container_name: epusdt
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./runtime:/app/runtime
    depends_on:
      mysql: # 修改 depends_on 结构
        condition: service_healthy # 等待 mysql 服务健康
      redis: # 也可以为 redis 添加 healthcheck 并等待
        condition: service_started # 或者至少等待 redis 容器启动 (如果 redis 启动很快)
    networks:
      - epusdt_net

  mysql:
    image: mysql:5.7
    container_name: epusdt_mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: epusdt
      MYSQL_USER: epusdt
      MYSQL_PASSWORD: epusdtpassword
      TZ: Asia/Shanghai  # 添加时区配置
    command:
      - --wait_timeout=28800
      - --interactive_timeout=28800
    volumes:
      - ./sql/epusdt.sql:/docker-entrypoint-initdb.d/epusdt.sql
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - epusdt_net
    healthcheck: # 添加 MySQL 健康检查
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"] # 使用环境变量
      interval: 10s # 每 10 秒检查一次
      timeout: 5s   # 每次检查超时时间 5 秒
      retries: 5    # 重试 5 次失败后标记为不健康
      start_period: 30s # 启动后等待 30 秒再开始检查 (给初始化留时间)

  redis:
    image: redis:alpine
    container_name: epusdt_redis
    environment:
      REDIS_PASSWORD: liuchen123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass liuchen123
    networks:
      - epusdt_net
    # 可以选择性地为 Redis 也添加 healthcheck
    # healthcheck:
    #   test: ["CMD", "redis-cli", "-a", "liuchen123", "ping"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

volumes:
  mysql_data:
  redis_data:

networks:
  epusdt_net:
    driver: bridge
    name: epusdt_net  # 添加这一行来固定网络名称